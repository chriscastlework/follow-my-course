generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String
  image        String?
  customerId   String? @unique // stripe customer id
  handle       String? @unique // Fixed typo: "handel" to "handle"
  isCreator      Boolean @default(false) @map("isCreator")
  stripeProductId String? @unique

  createdCourses    Course[]         @relation("CreatedCourses")
  purchasedCourses  Course[]         @relation("PurchasedCourses")

  createdEbooks     Ebook[]          @relation("CreatedEbooks")
  purchasedEbooks   Ebook[]          @relation("PurchasedEbooks")

  subscriptionsTo   Subscription[]   @relation("Subscriber")
  subscribers       Subscription[]   @relation("Creator")
  orders            Order[]
  comments          Comment[]
  likes             Like[]
  posts             Post[]           // Added missing relation to Post model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String  @id @default(cuid())
  stripeProductId String? @unique
  creatorId String  @map("userId")
  title       String
  description String
  price       Int
  isArchived  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation("CreatedCourses", fields: [creatorId], references: [id])
  purchasedBy    User[]           @relation("PurchasedCourses")
}

model Ebook {
  id          String  @id @default(cuid())
  stripeProductId String? @unique
  creatorId String  @map("userId")
  title       String
  description String
  price       Int
  mediaUrl    String?
  isArchived  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation("CreatedEbooks", fields: [creatorId], references: [id])
  purchasedBy    User[]           @relation("PurchasedEbooks")
}

model Subscription {
  id                String   @id @default(cuid())
  creatorId         String
  subscriberId  String   @map("subscriberId")
  planId            String   // Added planId field
  planType          PlanType
  price             Int
  startDate         DateTime @default(now())
  endDate           DateTime

  creator    User     @relation("Creator", fields: [creatorId], references: [id])
  subscriber User     @relation("Subscriber", fields: [subscriberId], references: [id])

  @@index([creatorId])
  @@index([subscriberId])
}

enum PlanType {
  MONTHLY
  YEARLY
}

model Post {
  id        String  @id @default(cuid())
  mediaUrl  String?
  mediaType String?
  text      String
  userId    String
  likes     Int     @default(0)
  isPublic  Boolean @default(false)

  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likesList Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Comment {
  id     String @id @default(cuid())
  text   String
  userId String
  postId String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  image      String
  price      Int
  isArchived Boolean @default(false)
  orders     Order[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  price     Int
  isPaid    Boolean  @default(false)
  size      String
  orderDate DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}
